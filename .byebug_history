c
@coaches
c
employee[coach_id]
coach-select
f.collection_select :coach_id, [], :id, :first_name, { prompt: 'Choose a coach' }, { class: 'form-control', id: 'coach-select' }
@user
employee
employe
c
employee
f.collection_select :coach_id, [], :id, :first_name, { prompt: 'Choose a coach' }, { class: 'form-control', id: 'coach-select' }
c
employee
employee[coach_id]
f.collection_select :coach_id, [], :id, :first_name, { prompt: 'Choose a coach' }, { class: 'form-control', id: 'coach-select' }
c
company_program = CompanyProgram.find_by_id(params[:id])
c
coaches.map { |coach| { id: coach.id, name: "#{coach.first_name} #{coach.last_name}" } }
coaches = company_program&.coaches
 company_program = CompanyProgram.find_by_id(params[:id])
c
coaches.map { |coach| { id: coach.id, name: "#{coach.first_name} #{coach.last_name}" } }
 coaches = company_program&.coaches
company_program = CompanyProgram.find_by_id(params[:id])
c
 coaches.map { |coach| { id: coach.id, name: "#{coach.first_name} #{coach.last_name}" } }
 coaches = company_program&.coaches
company_program = CompanyProgram.find_by_id(params[:id])
c
coaches = company_program&.coaches
 company_program = CompanyProgram.find_by_id(params[:id])
c
coaches.map { |coach| { id: coach.id, name: "#{coach.first_name} #{coach.last_name}" } }
 coaches = company_program&.coaches
params
 company_program = CompanyProgram.find_by_id(params[:id])
c
 render json: coaches.map { |coach| { id: coach.id, name: "#{coach.first_name} #{coach.last_name}" } }
coaches = company_program&.coaches
 company_program = CompanyProgram.find_by_id(params[:id])
c
 coaches.map { |coach| { id: coach.id, name: "#{coach.first_name} #{coach.last_name}" } }
 coaches = company_program&.coaches
company_program = CompanyProgram.find_by_id(params[:id])
c
Time.now.in_time_zone('UTC')
Time.current.in_time_zone('UTC')
current_time.utc
start_time
current_time
c
Time.current
 Time.now
 Time.zone.now
current_time
 current_time = Time.zone.now
start_time
current_time
c
scope.includes(:company, :program).all
c
"#{bindings[:object].company_program.program.name} (#{bindings[:object].company_program.company.name})"
c
post :join_program, params: { id: company_program.id }
company_program.id
c
expect(coach).not_to be_valid
coach = nil
c
coach
expect(coach).not_to be_valid
coach.first_name = nil
coach.first_name
c
 redirect_to root_path
flash[:alert] = "Company not found."
@company = nil
@company = Company.find_by_id(params[:id])
 @company
c
redirect_to companies_path
flash[:alert] = "Company not found."
@company = nil
 @company = Company.find_by_id(params[:id])
c
expect(response).to have_http_status(:success)
c
expect(response).to have_http_status(:success)
c
response.status
response
c
response
response.body
c
@assigned_programs
assigned_programs
@assigned_programs = @assigned_programs.joins(:program).where("programs.name ILIKE ?", "%#{params[:filter][:program_name]}%")
@assigned_programs.joins(:program).where("programs.name ILIKE ?", "%#{params[:filter][:program_name]}%")
@assigned_programs = current_user.company_programs.includes(:program, :company).paginate(page: params[:page], per_page: 8)
params[:filter][:program_name]
params
c
params
c
@assigned_programs.joins(:program).where("programs.name ILIKE ?", "%#{params[:filter][:program_name]}%")
@assigned_programs
@assigned_programs = current_user.company_programs.includes(:program, :company).paginate(page: params[:page], per_page: 8).class
@assigned_programs = current_user.company_programs.includes(:program, :company).paginate(page: params[:page], per_page: 8)
@assigned_programs
@assigned_programs = @assigned_programs.joins(:program).where("programs.name ILIKE ?", "%#{params[:filter][:program_name]}%")
params
c
params
c
   @assigned_programs = @assigned_programs.joins(:program).where("programs.name ILIKE ?", "%#{params[:filter][:program_name]}%")
params
c
@assigned_programs = @assigned_programs.joins(:program).where("programs.name ILIKE ?", "%#{params[:filter][:program_name]}%")
program
 @assigned_programs = @assigned_programs.joins(:program).where("programs.name ILIKE ?", "%#{params[:filter][:program_name]}%")
params[:filter][:program_name]
params[:filter].present?
params
c
params
params[:filter]
 @assigned_programs = current_user.company_programs.includes(:program, :company).paginate(page: params[:page], per_page: 8)
c!
c
 @no_assigned_programs = @assigned_programs.blank?
params
params[:filter].present?
@assigned_programs = current_user.company_programs.includes(:program, :company).paginate(page: params[:page], per_page: 8)
c
 bindings[:view].link_to('View Employees', bindings[:view].rails_admin.employees_list_path(id: bindings[:object].id))
 bindings[:view].link_to('View Employees', bindings[:view].rails_admin_employees_list_path(id: bindings[:object].id))
c
 bindings[:view].link_to('View Employees', bindings[:view].employees_list_path(id: bindings[:object].id))
c
bindings[:view].link_to('View Employees', bindings[:view].employees_list_path(id: bindings[:object].id))
bindings[:view].link_to('View Employees', bindings[:view].main_app.employees_list_path(id: bindings[:object].id))
bindings[:view].link_to('View Employees', bindings[:view].main_app.rails_admin.employees_list_path(id: bindings[:object].id))
bindings[:view].link_to('View Employees', bindings[:view].main_app.rails_admin_employees_list_path(id: bindings[:object].id))
c
bindings[:view].link_to('View Employees', bindings[:view].main_app.rails_admin_employees_list_path(id: bindings[:object].id))
c
 bindings[:view].link_to('View Employees', bindings[:view].employees_list_path(id: bindings[:object].id))
c
bindings[:object].id
bindings[:view]
bindings[:view].link_to('View Employees', bindings[:view].rails_admin.employees_list_path(id: bindings[:object].id))
c
  bindings[:view].link_to('View Employees', bindings[:view].rails_admin.employees_list_path(id: bindings[:object].id))
c
 bindings[:view].link_to('View Employees', bindings[:view].rails_admin.employees_list_path(id: bindings[:object].id))
bindings[:view]
bindings
 bindings[:view].link_to('View Employees', bindings[:view].rails_admin_employees_list_path(id: bindings[:object].id))
c
company_program.employees
company_program
c
redirect_to company_path(current_user.company) and return
 flash[:alert] = "company_program not found."
company_program.nil?
company_program = nil
redirect_to company_path and return
flash[:alert] = "company_program not found."
company_program.nil?
current_user.company_programs.include?(company_program)
company_program = nil
company_program
c
 current_user.join_program(company_program)
current_user.company_programs.include?(company_program)
params
company_program = CompanyProgram.find(params[:id])
c
company_program = program.company_programs.find_by(company: current_user.company)
program = CompanyProgram.find(params[:id])
params
c
company_program.employees.count
company_program.employees
c
company_program.employees
company_program.program.employees
company_program.program
company_program.employees.count
company_program.employees
company_program
c
programs.last.program_id
programs = @company.company_programs.includes(:program)
@company.company_programs.includes(:program)
@company.company_programs.programs
@company.company_programs.prgrams
@company.company_programs
@company
@programs.last.company_programs
@programs.last.compnay_programs
@programs.company_programs
@programs.count
@programs.pluck(:name)
@programs
@company
c
params
c
company_program = CompanyProgram.find_by_id(@user.company_program_id)
@user
params
@user.company_program_id
c
@company
params
c
params
c
params
c
cc
c
@company
c
params
@company = Company.find_by_id(params[:id])  
@company
c
@company
@company.programs
@programs
c
program.company_programs
program.company_program
program
current_user.company_programs.count
current_user.company_programs
program.company_programs.find_by(program_id: program.id)
program.company_programs.find_by(program_id: program.id))
program.company_programs
current_user.company_programs.include?(program.company_programs.find_by(company: @company))
current_user.company_programs
current_user
c
company_program
company_program = CompanyProgram.find_by_id(@user.company_program_id)
c
@user.join_program(company_program)
company_program
 company_program = CompanyProgram.find_by_id(@user.company_program_id)
c
params
